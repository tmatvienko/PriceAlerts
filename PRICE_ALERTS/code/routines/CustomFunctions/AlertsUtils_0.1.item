package routines;
import java.util.List;
import java.util.concurrent.*;
import java.time.Instant;
import java.util.Date;
import java.util.ArrayList;
/*
 * user specification: the function's comment should contain keys as follows: 1. write about the function's comment.but
 * it must be before the "{talendTypes}" key.
 * 
 * 2. {talendTypes} 's value must be talend Type, it is required . its value should be one of: String, char | Character,
 * long | Long, int | Integer, boolean | Boolean, byte | Byte, Date, double | Double, float | Float, Object, short |
 * Short
 * 
 * 3. {Category} define a category for the Function. it is required. its value is user-defined .
 * 
 * 4. {param} 's format is: {param} <type>[(<default value or closed list values>)] <name>[ : <comment>]
 * 
 * <type> 's value should be one of: string, int, list, double, object, boolean, long, char, date. <name>'s value is the
 * Function's parameter name. the {param} is optional. so if you the Function without the parameters. the {param} don't
 * added. you can have many parameters for the Function.
 * 
 * 5. {example} gives a example for the Function. it is optional.
 */


public class AlertsUtils {
	

	
	public static ConcurrentHashMap<Integer, AlertsUtils.StockCache> stockCacheMap = new ConcurrentHashMap<Integer, AlertsUtils.StockCache>();
	
	public static Integer dummyIncrementInt = 0;
	public static Integer dummyIncrementIntMail = 0;
	
	public static ConcurrentHashMap<Integer, AlertsUtils.AlertLog> alertLogMap = new ConcurrentHashMap<Integer, AlertsUtils.AlertLog>();
	
	public static List<AlertsUtils.RulesCache> rulesCache = new ArrayList<>();
	
	public static class StockCache {
		
		public Integer instrumentID;
		public String instrCode;
		public Double basePrice;
		public Double previousDayClosePrice;
		public Double tradePriceLastMin;
		public Double midPriceLast;
		public Double tradePriceLast;
		
		public StockCache(Integer instrumentID, String instrCode, Double basePrice, Double previousDayClosePrice, Double tradePriceLastMin) {
			this.instrumentID = instrumentID;
			this.instrCode = instrCode;
			this.basePrice = basePrice;
			this.previousDayClosePrice = previousDayClosePrice;
			this.tradePriceLastMin = tradePriceLastMin;
			
		}
		
	}
	
	public static class RulesCache {
		
		public Integer instrumentID;
		public String instrCode;
		public Integer ruleID;
		public Integer ruleNumber;
		public Integer thresholdID;
		public Double thresholdValue;
		public Integer thresholdDelay;
		
		public RulesCache(Integer instrumentID, String instrCode, Integer ruleID, Integer ruleNumber, Integer thresholdID, Double thresholdValue, Integer thresholdDelay) {
			this.instrumentID = instrumentID;
			this.instrCode = instrCode;
			this.ruleID = ruleID;
			this.ruleNumber = ruleNumber;
			this.thresholdID = thresholdID;
			this.thresholdValue = thresholdValue;
			this.thresholdDelay = thresholdDelay;
		}
	}
	
	
	
	
	public static class AlertLog {
		
		public Integer alertConfigurationID;
		public Integer ruleID;
		public Integer ruleThresholdID;
		public Integer instrumentID;
		public String priceType;
		public Double basePrice;
		public Double basePricePrevious;
		public Double midPrice;
		public Double tradePrice;
		public Double previousDayClosePrice;
		public Double closePrice;
		public Date alertTimestamp;
		public Date createdOn;
		public Boolean isSent;
		
		public AlertLog(Integer alertConfigurationID, Integer ruleID, Integer ruleThresholdID
								, Integer instrumentID, String priceType, Double basePrice, Double basePricePrevious
								, Double midPrice, Double tradePrice, Double previousDayClosePrice, Double closePrice
								, Date alertTimestamp, Date createdOn, Boolean isSent){
			this.alertConfigurationID = alertConfigurationID;
			this.ruleID = ruleID;
			this.ruleThresholdID = ruleThresholdID;
			this.instrumentID = instrumentID;
			this.priceType = priceType;
			this.basePrice = basePrice;
			this.basePricePrevious = basePricePrevious;
			this.midPrice = midPrice;
			this.tradePrice = tradePrice;
			this.previousDayClosePrice = previousDayClosePrice;
			this.closePrice = closePrice;
			this.alertTimestamp = alertTimestamp;
			this.createdOn = createdOn;
			this.isSent = isSent;
			
		}
		
		public AlertLog(){
		}
		
		
	}
	
	public static synchronized void setStockCacheValue(Integer alertConfigurationID, StockCache stockCache)
	{
		stockCacheMap.put(alertConfigurationID, stockCache);
	}
	
	public static synchronized void updateStockCacheValue(Integer alertConfigurationID, StockCache stockCache)
	{
		AlertsUtils.StockCache pValue = stockCacheMap.get(alertConfigurationID);
		if (pValue != null) {
			stockCacheMap.computeIfPresent(alertConfigurationID, (k, v) -> stockCache);
		}
	}

	public static synchronized void setAlertLogCache(Integer id, AlertLog alertLogCache)
	{
		alertLogMap.put(id, alertLogCache);
	}
	
	public static synchronized void updateAlertLogCache(Integer id, AlertLog alertLogCache)
	{
		AlertsUtils.AlertLog pValue = alertLogMap.get(id);
		if (pValue != null) {
			alertLogMap.computeIfPresent(id, (k, v) -> alertLogCache);
		}
	}
	
	public static synchronized void setSentAlertLogCache(Integer id)
	{
		AlertsUtils.AlertLog pValue = alertLogMap.get(id);
		if (pValue != null) {
			pValue.isSent = true;
			alertLogMap.computeIfPresent(id, (k, v) -> pValue);
		}
	}

	
	
}



